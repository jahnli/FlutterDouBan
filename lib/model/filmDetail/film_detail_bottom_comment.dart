///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class FilmDetailBottomCommentModelReviewsUser {
/*
{
  "loc": null,
  "kind": "user",
  "followed": false,
  "name": "咱说",
  "in_blacklist": false,
  "url": "https://www.douban.com/people/1030253/",
  "gender": "U",
  "reg_time": "2005-10-03 20:25:17",
  "uri": "douban://douban.com/user/1030253",
  "remark": "",
  "avatar": "https://img1.doubanio.com/icon/up1030253-159.jpg",
  "type": "user",
  "id": "1030253",
  "uid": "Uvo"
} 
*/

  String loc;
  String kind;
  bool followed;
  String name;
  bool inBlacklist;
  String url;
  String gender;
  String regTime;
  String uri;
  String remark;
  String avatar;
  String type;
  String id;
  String uid;

  FilmDetailBottomCommentModelReviewsUser({
    this.loc,
    this.kind,
    this.followed,
    this.name,
    this.inBlacklist,
    this.url,
    this.gender,
    this.regTime,
    this.uri,
    this.remark,
    this.avatar,
    this.type,
    this.id,
    this.uid,
  });
  FilmDetailBottomCommentModelReviewsUser.fromJson(Map<String, dynamic> json) {
    loc = json["loc"]?.toString();
    kind = json["kind"]?.toString();
    followed = json["followed"];
    name = json["name"]?.toString();
    inBlacklist = json["in_blacklist"];
    url = json["url"]?.toString();
    gender = json["gender"]?.toString();
    regTime = json["reg_time"]?.toString();
    uri = json["uri"]?.toString();
    remark = json["remark"]?.toString();
    avatar = json["avatar"]?.toString();
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    uid = json["uid"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["loc"] = loc;
    data["kind"] = kind;
    data["followed"] = followed;
    data["name"] = name;
    data["in_blacklist"] = inBlacklist;
    data["url"] = url;
    data["gender"] = gender;
    data["reg_time"] = regTime;
    data["uri"] = uri;
    data["remark"] = remark;
    data["avatar"] = avatar;
    data["type"] = type;
    data["id"] = id;
    data["uid"] = uid;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectCardColorScheme {
/*
{
  "is_dark": true,
  "primary_color_light": "4260a5",
  "_base_color": [
    0.616120218579235
  ],
  "secondary_color": "eff2f9",
  "_avg_color": [
    0.6209150326797386
  ],
  "primary_color_dark": "324a7f"
} 
*/

  bool isDark;
  String primaryColorLight;
  List<double> BaseColor;
  String secondaryColor;
  List<double> AvgColor;
  String primaryColorDark;

  FilmDetailBottomCommentModelReviewsSubjectCardColorScheme({
    this.isDark,
    this.primaryColorLight,
    this.BaseColor,
    this.secondaryColor,
    this.AvgColor,
    this.primaryColorDark,
  });
  FilmDetailBottomCommentModelReviewsSubjectCardColorScheme.fromJson(Map<String, dynamic> json) {
    isDark = json["is_dark"];
    primaryColorLight = json["primary_color_light"]?.toString();
  if (json["_base_color"] != null) {
  var v = json["_base_color"];
  var arr0 = List<double>();
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    BaseColor = arr0;
    }
    secondaryColor = json["secondary_color"]?.toString();
  if (json["_avg_color"] != null) {
  var v = json["_avg_color"];
  var arr0 = List<double>();
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    AvgColor = arr0;
    }
    primaryColorDark = json["primary_color_dark"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["is_dark"] = isDark;
    data["primary_color_light"] = primaryColorLight;
    if (BaseColor != null) {
      var v = BaseColor;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["_base_color"] = arr0;
    }
    data["secondary_color"] = secondaryColor;
    if (AvgColor != null) {
      var v = AvgColor;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["_avg_color"] = arr0;
    }
    data["primary_color_dark"] = primaryColorDark;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectCardRatingRating {
/*
{
  "count": 423278,
  "max": 10,
  "value": 7.9,
  "star_count": 4
} 
*/

  int count;
  int max;
  double value;
  int starCount;

  FilmDetailBottomCommentModelReviewsSubjectCardRatingRating({
    this.count,
    this.max,
    this.value,
    this.starCount,
  });
  FilmDetailBottomCommentModelReviewsSubjectCardRatingRating.fromJson(Map<String, dynamic> json) {
    count = json["count"]?.toInt();
    max = json["max"]?.toInt();
    value = json["value"]?.toDouble();
    starCount = json["star_count"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["count"] = count;
    data["max"] = max;
    data["value"] = value;
    data["star_count"] = starCount;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectCardRating {
/*
{
  "rating": {
    "count": 423278,
    "max": 10,
    "value": 7.9,
    "star_count": 4
  },
  "null_rating_reason": ""
} 
*/

  FilmDetailBottomCommentModelReviewsSubjectCardRatingRating rating;
  String nullRatingReason;

  FilmDetailBottomCommentModelReviewsSubjectCardRating({
    this.rating,
    this.nullRatingReason,
  });
  FilmDetailBottomCommentModelReviewsSubjectCardRating.fromJson(Map<String, dynamic> json) {
    rating = json["rating"] != null ? FilmDetailBottomCommentModelReviewsSubjectCardRatingRating.fromJson(json["rating"]) : null;
    nullRatingReason = json["null_rating_reason"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (rating != null) {
      data["rating"] = rating.toJson();
    }
    data["null_rating_reason"] = nullRatingReason;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectCard {
/*
{
  "rating": {
    "rating": {
      "count": 423278,
      "max": 10,
      "value": 7.9,
      "star_count": 4
    },
    "null_rating_reason": ""
  },
  "sharing_url": "https://www.douban.com/doubanapp/dispatch?fallback=https%3A%2F%2Fmovie.douban.com%2Fsubject%2F32659890%2F&uri=%2Fsubject%2F32659890",
  "title": "我和我的祖国",
  "url": "https://movie.douban.com/subject/32659890/",
  "abstract": "2019 / 中国大陆 / 剧情",
  "has_linewatch": false,
  "uri": "douban://douban.com/subject/32659890?subtype=movie",
  "cover_url": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp",
  "subtype": "movie",
  "title_tail": "(2019)",
  "header_bg_color": "324a7f",
  "subtype_cn": "电影",
  "color_scheme": {
    "is_dark": true,
    "primary_color_light": "4260a5",
    "_base_color": [
      0.616120218579235
    ],
    "secondary_color": "eff2f9",
    "_avg_color": [
      0.6209150326797386
    ],
    "primary_color_dark": "324a7f"
  },
  "uri_cn": "查看电影",
  "id": "32659890"
} 
*/

  FilmDetailBottomCommentModelReviewsSubjectCardRating rating;
  String sharingUrl;
  String title;
  String url;
  String theAbstract;
  bool hasLinewatch;
  String uri;
  String coverUrl;
  String subtype;
  String titleTail;
  String headerBgColor;
  String subtypeCn;
  FilmDetailBottomCommentModelReviewsSubjectCardColorScheme colorScheme;
  String uriCn;
  String id;

  FilmDetailBottomCommentModelReviewsSubjectCard({
    this.rating,
    this.sharingUrl,
    this.title,
    this.url,
    this.theAbstract,
    this.hasLinewatch,
    this.uri,
    this.coverUrl,
    this.subtype,
    this.titleTail,
    this.headerBgColor,
    this.subtypeCn,
    this.colorScheme,
    this.uriCn,
    this.id,
  });
  FilmDetailBottomCommentModelReviewsSubjectCard.fromJson(Map<String, dynamic> json) {
    rating = json["rating"] != null ? FilmDetailBottomCommentModelReviewsSubjectCardRating.fromJson(json["rating"]) : null;
    sharingUrl = json["sharing_url"]?.toString();
    title = json["title"]?.toString();
    url = json["url"]?.toString();
    theAbstract = json["abstract"]?.toString();
    hasLinewatch = json["has_linewatch"];
    uri = json["uri"]?.toString();
    coverUrl = json["cover_url"]?.toString();
    subtype = json["subtype"]?.toString();
    titleTail = json["title_tail"]?.toString();
    headerBgColor = json["header_bg_color"]?.toString();
    subtypeCn = json["subtype_cn"]?.toString();
    colorScheme = json["color_scheme"] != null ? FilmDetailBottomCommentModelReviewsSubjectCardColorScheme.fromJson(json["color_scheme"]) : null;
    uriCn = json["uri_cn"]?.toString();
    id = json["id"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (rating != null) {
      data["rating"] = rating.toJson();
    }
    data["sharing_url"] = sharingUrl;
    data["title"] = title;
    data["url"] = url;
    data["abstract"] = theAbstract;
    data["has_linewatch"] = hasLinewatch;
    data["uri"] = uri;
    data["cover_url"] = coverUrl;
    data["subtype"] = subtype;
    data["title_tail"] = titleTail;
    data["header_bg_color"] = headerBgColor;
    data["subtype_cn"] = subtypeCn;
    if (colorScheme != null) {
      data["color_scheme"] = colorScheme.toJson();
    }
    data["uri_cn"] = uriCn;
    data["id"] = id;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectColorScheme {
/*
{
  "is_dark": true,
  "primary_color_light": "a55d35",
  "_base_color": [
    0.05938697318007663
  ],
  "secondary_color": "f9f6f4",
  "_avg_color": [
    0.051971326164874564
  ],
  "primary_color_dark": "7f4829"
} 
*/

  bool isDark;
  String primaryColorLight;
  List<double> BaseColor;
  String secondaryColor;
  List<double> AvgColor;
  String primaryColorDark;

  FilmDetailBottomCommentModelReviewsSubjectColorScheme({
    this.isDark,
    this.primaryColorLight,
    this.BaseColor,
    this.secondaryColor,
    this.AvgColor,
    this.primaryColorDark,
  });
  FilmDetailBottomCommentModelReviewsSubjectColorScheme.fromJson(Map<String, dynamic> json) {
    isDark = json["is_dark"];
    primaryColorLight = json["primary_color_light"]?.toString();
  if (json["_base_color"] != null) {
  var v = json["_base_color"];
  var arr0 = List<double>();
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    BaseColor = arr0;
    }
    secondaryColor = json["secondary_color"]?.toString();
  if (json["_avg_color"] != null) {
  var v = json["_avg_color"];
  var arr0 = List<double>();
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    AvgColor = arr0;
    }
    primaryColorDark = json["primary_color_dark"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["is_dark"] = isDark;
    data["primary_color_light"] = primaryColorLight;
    if (BaseColor != null) {
      var v = BaseColor;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["_base_color"] = arr0;
    }
    data["secondary_color"] = secondaryColor;
    if (AvgColor != null) {
      var v = AvgColor;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["_avg_color"] = arr0;
    }
    data["primary_color_dark"] = primaryColorDark;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectActors {
/*
{
  "name": "黄渤"
} 
*/

  String name;

  FilmDetailBottomCommentModelReviewsSubjectActors({
    this.name,
  });
  FilmDetailBottomCommentModelReviewsSubjectActors.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectDirectors {
/*
{
  "name": "陈凯歌"
} 
*/

  String name;

  FilmDetailBottomCommentModelReviewsSubjectDirectors({
    this.name,
  });
  FilmDetailBottomCommentModelReviewsSubjectDirectors.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectPic {
/*
{
  "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2567998580.webp",
  "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp"
} 
*/

  String large;
  String normal;

  FilmDetailBottomCommentModelReviewsSubjectPic({
    this.large,
    this.normal,
  });
  FilmDetailBottomCommentModelReviewsSubjectPic.fromJson(Map<String, dynamic> json) {
    large = json["large"]?.toString();
    normal = json["normal"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["large"] = large;
    data["normal"] = normal;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubjectRating {
/*
{
  "count": 423277,
  "max": 10,
  "star_count": 4,
  "value": 7.9
} 
*/

  int count;
  int max;
  int starCount;
  double value;

  FilmDetailBottomCommentModelReviewsSubjectRating({
    this.count,
    this.max,
    this.starCount,
    this.value,
  });
  FilmDetailBottomCommentModelReviewsSubjectRating.fromJson(Map<String, dynamic> json) {
    count = json["count"]?.toInt();
    max = json["max"]?.toInt();
    starCount = json["star_count"]?.toInt();
    value = json["value"]?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["count"] = count;
    data["max"] = max;
    data["star_count"] = starCount;
    data["value"] = value;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsSubject {
/*
{
  "rating": {
    "count": 423277,
    "max": 10,
    "star_count": 4,
    "value": 7.9
  },
  "genres": [
    "剧情"
  ],
  "sharing_url": "https://www.douban.com/doubanapp/dispatch/movie/32659890",
  "pubdate": [
    "2019-09-30(中国大陆)"
  ],
  "has_linewatch": false,
  "url": "https://movie.douban.com/subject/32659890/",
  "title": "我和我的祖国",
  "release_date": null,
  "pic": {
    "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2567998580.webp",
    "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp"
  },
  "uri": "douban://douban.com/movie/32659890",
  "subtype": "movie",
  "directors": [
    {
      "name": "陈凯歌"
    }
  ],
  "is_show": false,
  "actors": [
    {
      "name": "黄渤"
    }
  ],
  "is_released": true,
  "year": "2019",
  "card_subtitle": "2019 / 中国大陆 / 剧情 / 陈凯歌 张一白 管虎 薛晓路 徐峥 宁浩 文牧野 / 黄渤 张译",
  "color_scheme": {
    "is_dark": true,
    "primary_color_light": "a55d35",
    "_base_color": [
      0.05938697318007663
    ],
    "secondary_color": "f9f6f4",
    "_avg_color": [
      0.051971326164874564
    ],
    "primary_color_dark": "7f4829"
  },
  "type": "movie",
  "id": "32659890",
  "null_rating_reason": ""
} 
*/

  FilmDetailBottomCommentModelReviewsSubjectRating rating;
  List<String> genres;
  String sharingUrl;
  List<String> pubdate;
  bool hasLinewatch;
  String url;
  String title;
  String releaseDate;
  FilmDetailBottomCommentModelReviewsSubjectPic pic;
  String uri;
  String subtype;
  List<FilmDetailBottomCommentModelReviewsSubjectDirectors> directors;
  bool isShow;
  List<FilmDetailBottomCommentModelReviewsSubjectActors> actors;
  bool isReleased;
  String year;
  String cardSubtitle;
  FilmDetailBottomCommentModelReviewsSubjectColorScheme colorScheme;
  String type;
  String id;
  String nullRatingReason;

  FilmDetailBottomCommentModelReviewsSubject({
    this.rating,
    this.genres,
    this.sharingUrl,
    this.pubdate,
    this.hasLinewatch,
    this.url,
    this.title,
    this.releaseDate,
    this.pic,
    this.uri,
    this.subtype,
    this.directors,
    this.isShow,
    this.actors,
    this.isReleased,
    this.year,
    this.cardSubtitle,
    this.colorScheme,
    this.type,
    this.id,
    this.nullRatingReason,
  });
  FilmDetailBottomCommentModelReviewsSubject.fromJson(Map<String, dynamic> json) {
    rating = json["rating"] != null ? FilmDetailBottomCommentModelReviewsSubjectRating.fromJson(json["rating"]) : null;
  if (json["genres"] != null) {
  var v = json["genres"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    genres = arr0;
    }
    sharingUrl = json["sharing_url"]?.toString();
  if (json["pubdate"] != null) {
  var v = json["pubdate"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    pubdate = arr0;
    }
    hasLinewatch = json["has_linewatch"];
    url = json["url"]?.toString();
    title = json["title"]?.toString();
    releaseDate = json["release_date"]?.toString();
    pic = json["pic"] != null ? FilmDetailBottomCommentModelReviewsSubjectPic.fromJson(json["pic"]) : null;
    uri = json["uri"]?.toString();
    subtype = json["subtype"]?.toString();
  if (json["directors"] != null) {
  var v = json["directors"];
  var arr0 = List<FilmDetailBottomCommentModelReviewsSubjectDirectors>();
  v.forEach((v) {
  arr0.add(FilmDetailBottomCommentModelReviewsSubjectDirectors.fromJson(v));
  });
    directors = arr0;
    }
    isShow = json["is_show"];
  if (json["actors"] != null) {
  var v = json["actors"];
  var arr0 = List<FilmDetailBottomCommentModelReviewsSubjectActors>();
  v.forEach((v) {
  arr0.add(FilmDetailBottomCommentModelReviewsSubjectActors.fromJson(v));
  });
    actors = arr0;
    }
    isReleased = json["is_released"];
    year = json["year"]?.toString();
    cardSubtitle = json["card_subtitle"]?.toString();
    colorScheme = json["color_scheme"] != null ? FilmDetailBottomCommentModelReviewsSubjectColorScheme.fromJson(json["color_scheme"]) : null;
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    nullRatingReason = json["null_rating_reason"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (rating != null) {
      data["rating"] = rating.toJson();
    }
    if (genres != null) {
      var v = genres;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["genres"] = arr0;
    }
    data["sharing_url"] = sharingUrl;
    if (pubdate != null) {
      var v = pubdate;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["pubdate"] = arr0;
    }
    data["has_linewatch"] = hasLinewatch;
    data["url"] = url;
    data["title"] = title;
    data["release_date"] = releaseDate;
    if (pic != null) {
      data["pic"] = pic.toJson();
    }
    data["uri"] = uri;
    data["subtype"] = subtype;
    if (directors != null) {
      var v = directors;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["directors"] = arr0;
    }
    data["is_show"] = isShow;
    if (actors != null) {
      var v = actors;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["actors"] = arr0;
    }
    data["is_released"] = isReleased;
    data["year"] = year;
    data["card_subtitle"] = cardSubtitle;
    if (colorScheme != null) {
      data["color_scheme"] = colorScheme.toJson();
    }
    data["type"] = type;
    data["id"] = id;
    data["null_rating_reason"] = nullRatingReason;
    return data;
  }
}

class FilmDetailBottomCommentModelReviewsRating {
/*
{
  "count": 1,
  "max": 5,
  "star_count": 3,
  "value": 3
} 
*/

  int count;
  int max;
  int starCount;
  int value;

  FilmDetailBottomCommentModelReviewsRating({
    this.count,
    this.max,
    this.starCount,
    this.value,
  });
  FilmDetailBottomCommentModelReviewsRating.fromJson(Map<String, dynamic> json) {
    count = json["count"]?.toInt();
    max = json["max"]?.toInt();
    starCount = json["star_count"]?.toInt();
    value = json["value"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["count"] = count;
    data["max"] = max;
    data["star_count"] = starCount;
    data["value"] = value;
    return data;
  }
}

class FilmDetailBottomCommentModelReviews {
/*
{
  "rating": {
    "count": 1,
    "max": 5,
    "star_count": 3,
    "value": 3
  },
  "read_count": 312585,
  "abstract": "前天点映时，因为开映之后还不断有观众进场干扰了观看，《前夜》的剧情信息又非常密集，虽然明显感觉到存在多处剧情硬伤，但也不排除是自己的理解有误，于是今天特地去二刷了《前夜》，以下是详细讨论。\r\n首先，梳理一下《前夜》的剧情（如果有观众理解的剧情与此不一致，那么请相信我看过两遍之后的表述）：\r\n9月30日，大典举行前一天，由于查到附近有特务于是把广场封闭了。此时，黄渤（林治远）认为他的电动升旗方案还不能保证万无一失。\r\n于是黄渤回到他的工作室，开始用他早就搭建好的三分之一比例模型进行最...",
  "topic": null,
  "create_time": "2019-09-30 20:51:12",
  "collections_count": 735,
  "reshares_count": 64,
  "vote_status": 0,
  "id": "10540131",
  "subject": {
    "rating": {
      "count": 423277,
      "max": 10,
      "star_count": 4,
      "value": 7.9
    },
    "genres": [
      "剧情"
    ],
    "sharing_url": "https://www.douban.com/doubanapp/dispatch/movie/32659890",
    "pubdate": [
      "2019-09-30(中国大陆)"
    ],
    "has_linewatch": false,
    "url": "https://movie.douban.com/subject/32659890/",
    "title": "我和我的祖国",
    "release_date": null,
    "pic": {
      "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2567998580.webp",
      "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp"
    },
    "uri": "douban://douban.com/movie/32659890",
    "subtype": "movie",
    "directors": [
      {
        "name": "陈凯歌"
      }
    ],
    "is_show": false,
    "actors": [
      {
        "name": "黄渤"
      }
    ],
    "is_released": true,
    "year": "2019",
    "card_subtitle": "2019 / 中国大陆 / 剧情 / 陈凯歌 张一白 管虎 薛晓路 徐峥 宁浩 文牧野 / 黄渤 张译",
    "color_scheme": {
      "is_dark": true,
      "primary_color_light": "a55d35",
      "_base_color": [
        0.05938697318007663
      ],
      "secondary_color": "f9f6f4",
      "_avg_color": [
        0.051971326164874564
      ],
      "primary_color_dark": "7f4829"
    },
    "type": "movie",
    "id": "32659890",
    "null_rating_reason": ""
  },
  "title": "详解《我和我的祖国》之《前夜》的剧情硬伤",
  "type_name": "影评",
  "is_collected": false,
  "type": "review",
  "reaction_type": 0,
  "useful_count": 2492,
  "subject_card": {
    "rating": {
      "rating": {
        "count": 423278,
        "max": 10,
        "value": 7.9,
        "star_count": 4
      },
      "null_rating_reason": ""
    },
    "sharing_url": "https://www.douban.com/doubanapp/dispatch?fallback=https%3A%2F%2Fmovie.douban.com%2Fsubject%2F32659890%2F&uri=%2Fsubject%2F32659890",
    "title": "我和我的祖国",
    "url": "https://movie.douban.com/subject/32659890/",
    "abstract": "2019 / 中国大陆 / 剧情",
    "has_linewatch": false,
    "uri": "douban://douban.com/subject/32659890?subtype=movie",
    "cover_url": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp",
    "subtype": "movie",
    "title_tail": "(2019)",
    "header_bg_color": "324a7f",
    "subtype_cn": "电影",
    "color_scheme": {
      "is_dark": true,
      "primary_color_light": "4260a5",
      "_base_color": [
        0.616120218579235
      ],
      "secondary_color": "eff2f9",
      "_avg_color": [
        0.6209150326797386
      ],
      "primary_color_dark": "324a7f"
    },
    "uri_cn": "查看电影",
    "id": "32659890"
  },
  "cover_url": "",
  "timeline_share_count": 64,
  "useless_count": 352,
  "user": {
    "loc": null,
    "kind": "user",
    "followed": false,
    "name": "咱说",
    "in_blacklist": false,
    "url": "https://www.douban.com/people/1030253/",
    "gender": "U",
    "reg_time": "2005-10-03 20:25:17",
    "uri": "douban://douban.com/user/1030253",
    "remark": "",
    "avatar": "https://img1.doubanio.com/icon/up1030253-159.jpg",
    "type": "user",
    "id": "1030253",
    "uid": "Uvo"
  },
  "spoiler": false,
  "sharing_url": "https://www.douban.com/doubanapp/dispatch/review/10540131",
  "photos": [
    null
  ],
  "likers_count": 2492,
  "reply_limit": "A",
  "uri": "douban://douban.com/review/10540131",
  "url": "https://movie.douban.com/review/10540131/",
  "reactions_count": 2492,
  "comments_count": 1107,
  "rtype": "review"
} 
*/

  FilmDetailBottomCommentModelReviewsRating rating;
  int readCount;
  String theAbstract;
  String topic;
  String createTime;
  int collectionsCount;
  int resharesCount;
  int voteStatus;
  String id;
  FilmDetailBottomCommentModelReviewsSubject subject;
  String title;
  String typeName;
  bool isCollected;
  String type;
  int reactionType;
  int usefulCount;
  FilmDetailBottomCommentModelReviewsSubjectCard subjectCard;
  String coverUrl;
  int timelineShareCount;
  int uselessCount;
  FilmDetailBottomCommentModelReviewsUser user;
  bool spoiler;
  String sharingUrl;
  List photos;
  int likersCount;
  String replyLimit;
  String uri;
  String url;
  int reactionsCount;
  int commentsCount;
  String rtype;

  FilmDetailBottomCommentModelReviews({
    this.rating,
    this.readCount,
    this.theAbstract,
    this.topic,
    this.createTime,
    this.collectionsCount,
    this.resharesCount,
    this.voteStatus,
    this.id,
    this.subject,
    this.title,
    this.typeName,
    this.isCollected,
    this.type,
    this.reactionType,
    this.usefulCount,
    this.subjectCard,
    this.coverUrl,
    this.timelineShareCount,
    this.uselessCount,
    this.user,
    this.spoiler,
    this.sharingUrl,
    this.photos,
    this.likersCount,
    this.replyLimit,
    this.uri,
    this.url,
    this.reactionsCount,
    this.commentsCount,
    this.rtype,
  });
  FilmDetailBottomCommentModelReviews.fromJson(Map<String, dynamic> json) {
    rating = json["rating"] != null ? FilmDetailBottomCommentModelReviewsRating.fromJson(json["rating"]) : null;
    readCount = json["read_count"]?.toInt();
    theAbstract = json["abstract"]?.toString();
    topic = json["topic"]?.toString();
    createTime = json["create_time"]?.toString();
    collectionsCount = json["collections_count"]?.toInt();
    resharesCount = json["reshares_count"]?.toInt();
    voteStatus = json["vote_status"]?.toInt();
    id = json["id"]?.toString();
    subject = json["subject"] != null ? FilmDetailBottomCommentModelReviewsSubject.fromJson(json["subject"]) : null;
    title = json["title"]?.toString();
    typeName = json["type_name"]?.toString();
    isCollected = json["is_collected"];
    type = json["type"]?.toString();
    reactionType = json["reaction_type"]?.toInt();
    usefulCount = json["useful_count"]?.toInt();
    subjectCard = json["subject_card"] != null ? FilmDetailBottomCommentModelReviewsSubjectCard.fromJson(json["subject_card"]) : null;
    coverUrl = json["cover_url"]?.toString();
    timelineShareCount = json["timeline_share_count"]?.toInt();
    uselessCount = json["useless_count"]?.toInt();
    user = json["user"] != null ? FilmDetailBottomCommentModelReviewsUser.fromJson(json["user"]) : null;
    spoiler = json["spoiler"];
    sharingUrl = json["sharing_url"]?.toString();
    likersCount = json["likers_count"]?.toInt();
    replyLimit = json["reply_limit"]?.toString();
    uri = json["uri"]?.toString();
    url = json["url"]?.toString();
    reactionsCount = json["reactions_count"]?.toInt();
    commentsCount = json["comments_count"]?.toInt();
    rtype = json["rtype"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (rating != null) {
      data["rating"] = rating.toJson();
    }
    data["read_count"] = readCount;
    data["abstract"] = theAbstract;
    data["topic"] = topic;
    data["create_time"] = createTime;
    data["collections_count"] = collectionsCount;
    data["reshares_count"] = resharesCount;
    data["vote_status"] = voteStatus;
    data["id"] = id;
    if (subject != null) {
      data["subject"] = subject.toJson();
    }
    data["title"] = title;
    data["type_name"] = typeName;
    data["is_collected"] = isCollected;
    data["type"] = type;
    data["reaction_type"] = reactionType;
    data["useful_count"] = usefulCount;
    if (subjectCard != null) {
      data["subject_card"] = subjectCard.toJson();
    }
    data["cover_url"] = coverUrl;
    data["timeline_share_count"] = timelineShareCount;
    data["useless_count"] = uselessCount;
    if (user != null) {
      data["user"] = user.toJson();
    }
    data["spoiler"] = spoiler;
    data["sharing_url"] = sharingUrl;
    data["likers_count"] = likersCount;
    data["reply_limit"] = replyLimit;
    data["uri"] = uri;
    data["url"] = url;
    data["reactions_count"] = reactionsCount;
    data["comments_count"] = commentsCount;
    data["rtype"] = rtype;
    return data;
  }
}

class FilmDetailBottomCommentModel {
/*
{
  "count": 20,
  "start": 0,
  "total": 1255,
  "reviews": [
    {
      "rating": {
        "count": 1,
        "max": 5,
        "star_count": 3,
        "value": 3
      },
      "read_count": 312585,
      "abstract": "前天点映时，因为开映之后还不断有观众进场干扰了观看，《前夜》的剧情信息又非常密集，虽然明显感觉到存在多处剧情硬伤，但也不排除是自己的理解有误，于是今天特地去二刷了《前夜》，以下是详细讨论。\r\n首先，梳理一下《前夜》的剧情（如果有观众理解的剧情与此不一致，那么请相信我看过两遍之后的表述）：\r\n9月30日，大典举行前一天，由于查到附近有特务于是把广场封闭了。此时，黄渤（林治远）认为他的电动升旗方案还不能保证万无一失。\r\n于是黄渤回到他的工作室，开始用他早就搭建好的三分之一比例模型进行最...",
      "topic": null,
      "create_time": "2019-09-30 20:51:12",
      "collections_count": 735,
      "reshares_count": 64,
      "vote_status": 0,
      "id": "10540131",
      "subject": {
        "rating": {
          "count": 423277,
          "max": 10,
          "star_count": 4,
          "value": 7.9
        },
        "genres": [
          "剧情"
        ],
        "sharing_url": "https://www.douban.com/doubanapp/dispatch/movie/32659890",
        "pubdate": [
          "2019-09-30(中国大陆)"
        ],
        "has_linewatch": false,
        "url": "https://movie.douban.com/subject/32659890/",
        "title": "我和我的祖国",
        "release_date": null,
        "pic": {
          "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2567998580.webp",
          "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp"
        },
        "uri": "douban://douban.com/movie/32659890",
        "subtype": "movie",
        "directors": [
          {
            "name": "陈凯歌"
          }
        ],
        "is_show": false,
        "actors": [
          {
            "name": "黄渤"
          }
        ],
        "is_released": true,
        "year": "2019",
        "card_subtitle": "2019 / 中国大陆 / 剧情 / 陈凯歌 张一白 管虎 薛晓路 徐峥 宁浩 文牧野 / 黄渤 张译",
        "color_scheme": {
          "is_dark": true,
          "primary_color_light": "a55d35",
          "_base_color": [
            0.05938697318007663
          ],
          "secondary_color": "f9f6f4",
          "_avg_color": [
            0.051971326164874564
          ],
          "primary_color_dark": "7f4829"
        },
        "type": "movie",
        "id": "32659890",
        "null_rating_reason": ""
      },
      "title": "详解《我和我的祖国》之《前夜》的剧情硬伤",
      "type_name": "影评",
      "is_collected": false,
      "type": "review",
      "reaction_type": 0,
      "useful_count": 2492,
      "subject_card": {
        "rating": {
          "rating": {
            "count": 423278,
            "max": 10,
            "value": 7.9,
            "star_count": 4
          },
          "null_rating_reason": ""
        },
        "sharing_url": "https://www.douban.com/doubanapp/dispatch?fallback=https%3A%2F%2Fmovie.douban.com%2Fsubject%2F32659890%2F&uri=%2Fsubject%2F32659890",
        "title": "我和我的祖国",
        "url": "https://movie.douban.com/subject/32659890/",
        "abstract": "2019 / 中国大陆 / 剧情",
        "has_linewatch": false,
        "uri": "douban://douban.com/subject/32659890?subtype=movie",
        "cover_url": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp",
        "subtype": "movie",
        "title_tail": "(2019)",
        "header_bg_color": "324a7f",
        "subtype_cn": "电影",
        "color_scheme": {
          "is_dark": true,
          "primary_color_light": "4260a5",
          "_base_color": [
            0.616120218579235
          ],
          "secondary_color": "eff2f9",
          "_avg_color": [
            0.6209150326797386
          ],
          "primary_color_dark": "324a7f"
        },
        "uri_cn": "查看电影",
        "id": "32659890"
      },
      "cover_url": "",
      "timeline_share_count": 64,
      "useless_count": 352,
      "user": {
        "loc": null,
        "kind": "user",
        "followed": false,
        "name": "咱说",
        "in_blacklist": false,
        "url": "https://www.douban.com/people/1030253/",
        "gender": "U",
        "reg_time": "2005-10-03 20:25:17",
        "uri": "douban://douban.com/user/1030253",
        "remark": "",
        "avatar": "https://img1.doubanio.com/icon/up1030253-159.jpg",
        "type": "user",
        "id": "1030253",
        "uid": "Uvo"
      },
      "spoiler": false,
      "sharing_url": "https://www.douban.com/doubanapp/dispatch/review/10540131",
      "photos": [
        null
      ],
      "likers_count": 2492,
      "reply_limit": "A",
      "uri": "douban://douban.com/review/10540131",
      "url": "https://movie.douban.com/review/10540131/",
      "reactions_count": 2492,
      "comments_count": 1107,
      "rtype": "review"
    }
  ]
} 
*/

  int count;
  int start;
  int total;
  List<FilmDetailBottomCommentModelReviews> reviews;

  FilmDetailBottomCommentModel({
    this.count,
    this.start,
    this.total,
    this.reviews,
  });
  FilmDetailBottomCommentModel.fromJson(Map<String, dynamic> json) {
    count = json["count"]?.toInt();
    start = json["start"]?.toInt();
    total = json["total"]?.toInt();
  if (json["reviews"] != null) {
  var v = json["reviews"];
  var arr0 = List<FilmDetailBottomCommentModelReviews>();
  v.forEach((v) {
  arr0.add(FilmDetailBottomCommentModelReviews.fromJson(v));
  });
    reviews = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["count"] = count;
    data["start"] = start;
    data["total"] = total;
    if (reviews != null) {
      var v = reviews;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["reviews"] = arr0;
    }
    return data;
  }
}
