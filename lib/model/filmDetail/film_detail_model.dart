///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class FilmDetailModelTrailer {
/*
{
  "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/movie/32659890/trailer%3Ftrailer_id%3D252949%26trailer_type%3DA",
  "video_url": "http://vt1.doubanio.com/201910211236/b18f4fccbb12c733fb4be23101a60470/view/movie/M/402520949.mp4",
  "title": "预告片",
  "uri": "douban://douban.com/movie/32659890/trailer?trailer_id=252949&trailer_type=A",
  "cover_url": "https://img3.doubanio.com/img/trailer/medium/2569021040.jpg?",
  "term_num": 0,
  "n_comments": 290,
  "create_time": "2019-09-18",
  "subject_title": "我和我的祖国",
  "file_size": 40465196,
  "runtime": "02:59",
  "type": "A",
  "id": "252949",
  "desc": ""
} 
*/

  String sharingUrl;
  String videoUrl;
  String title;
  String uri;
  String coverUrl;
  int termNum;
  int nComments;
  String createTime;
  String subjectTitle;
  int fileSize;
  String runtime;
  String type;
  String id;
  String desc;

  FilmDetailModelTrailer({
    this.sharingUrl,
    this.videoUrl,
    this.title,
    this.uri,
    this.coverUrl,
    this.termNum,
    this.nComments,
    this.createTime,
    this.subjectTitle,
    this.fileSize,
    this.runtime,
    this.type,
    this.id,
    this.desc,
  });
  FilmDetailModelTrailer.fromJson(Map<String, dynamic> json) {
    sharingUrl = json["sharing_url"]?.toString();
    videoUrl = json["video_url"]?.toString();
    title = json["title"]?.toString();
    uri = json["uri"]?.toString();
    coverUrl = json["cover_url"]?.toString();
    termNum = json["term_num"]?.toInt();
    nComments = json["n_comments"]?.toInt();
    createTime = json["create_time"]?.toString();
    subjectTitle = json["subject_title"]?.toString();
    fileSize = json["file_size"]?.toInt();
    runtime = json["runtime"]?.toString();
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    desc = json["desc"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["sharing_url"] = sharingUrl;
    data["video_url"] = videoUrl;
    data["title"] = title;
    data["uri"] = uri;
    data["cover_url"] = coverUrl;
    data["term_num"] = termNum;
    data["n_comments"] = nComments;
    data["create_time"] = createTime;
    data["subject_title"] = subjectTitle;
    data["file_size"] = fileSize;
    data["runtime"] = runtime;
    data["type"] = type;
    data["id"] = id;
    data["desc"] = desc;
    return data;
  }
}

class FilmDetailModelVideoAuthorLoc {
/*
{
  "id": "108296",
  "name": "上海",
  "uid": "shanghai"
} 
*/

  String id;
  String name;
  String uid;

  FilmDetailModelVideoAuthorLoc({
    this.id,
    this.name,
    this.uid,
  });
  FilmDetailModelVideoAuthorLoc.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toString();
    name = json["name"]?.toString();
    uid = json["uid"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    data["uid"] = uid;
    return data;
  }
}

class FilmDetailModelVideoAuthor {
/*
{
  "loc": {
    "id": "108296",
    "name": "上海",
    "uid": "shanghai"
  },
  "kind": "user",
  "followed": false,
  "name": "口袋电影君",
  "in_blacklist": false,
  "url": "https://www.douban.com/people/2308894/",
  "gender": "M",
  "reg_time": "2008-03-16 14:39:14",
  "uri": "douban://douban.com/user/2308894",
  "remark": "",
  "avatar": "https://img3.doubanio.com/icon/up2308894-4.jpg",
  "type": "user",
  "id": "2308894",
  "uid": "petergy"
} 
*/

  FilmDetailModelVideoAuthorLoc loc;
  String kind;
  bool followed;
  String name;
  bool inBlacklist;
  String url;
  String gender;
  String regTime;
  String uri;
  String remark;
  String avatar;
  String type;
  String id;
  String uid;

  FilmDetailModelVideoAuthor({
    this.loc,
    this.kind,
    this.followed,
    this.name,
    this.inBlacklist,
    this.url,
    this.gender,
    this.regTime,
    this.uri,
    this.remark,
    this.avatar,
    this.type,
    this.id,
    this.uid,
  });
  FilmDetailModelVideoAuthor.fromJson(Map<String, dynamic> json) {
    loc = json["loc"] != null ? FilmDetailModelVideoAuthorLoc.fromJson(json["loc"]) : null;
    kind = json["kind"]?.toString();
    followed = json["followed"];
    name = json["name"]?.toString();
    inBlacklist = json["in_blacklist"];
    url = json["url"]?.toString();
    gender = json["gender"]?.toString();
    regTime = json["reg_time"]?.toString();
    uri = json["uri"]?.toString();
    remark = json["remark"]?.toString();
    avatar = json["avatar"]?.toString();
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    uid = json["uid"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (loc != null) {
      data["loc"] = loc.toJson();
    }
    data["kind"] = kind;
    data["followed"] = followed;
    data["name"] = name;
    data["in_blacklist"] = inBlacklist;
    data["url"] = url;
    data["gender"] = gender;
    data["reg_time"] = regTime;
    data["uri"] = uri;
    data["remark"] = remark;
    data["avatar"] = avatar;
    data["type"] = type;
    data["id"] = id;
    data["uid"] = uid;
    return data;
  }
}

class FilmDetailModelVideo {
/*
{
  "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/movie/32659890/video%3Fvideo_id%3D104188%26video_type%3DA",
  "video_url": "https://sv1.doubanio.com/201910211235/395d188628e79828e78b638f083bbf22/video/2019/M/401040188.mp4",
  "title": "《我和我的祖国》引领国庆档冲击30亿元",
  "author": {
    "loc": {
      "id": "108296",
      "name": "上海",
      "uid": "shanghai"
    },
    "kind": "user",
    "followed": false,
    "name": "口袋电影君",
    "in_blacklist": false,
    "url": "https://www.douban.com/people/2308894/",
    "gender": "M",
    "reg_time": "2008-03-16 14:39:14",
    "uri": "douban://douban.com/user/2308894",
    "remark": "",
    "avatar": "https://img3.doubanio.com/icon/up2308894-4.jpg",
    "type": "user",
    "id": "2308894",
    "uid": "petergy"
  },
  "uri": "douban://douban.com/movie/32659890/video?video_id=104188&video_type=A",
  "cover_url": "https://img3.doubanio.com/view/photo/photo/public/p2571034074.webp?",
  "n_comments": 2,
  "create_time": "2019-10-09",
  "file_size": 0,
  "runtime": "02:36",
  "type": "A",
  "id": "104188",
  "desc": "《我和我的祖国》引领国庆档冲击30亿人民币！"
} 
*/

  String sharingUrl;
  String videoUrl;
  String title;
  FilmDetailModelVideoAuthor author;
  String uri;
  String coverUrl;
  int nComments;
  String createTime;
  int fileSize;
  String runtime;
  String type;
  String id;
  String desc;

  FilmDetailModelVideo({
    this.sharingUrl,
    this.videoUrl,
    this.title,
    this.author,
    this.uri,
    this.coverUrl,
    this.nComments,
    this.createTime,
    this.fileSize,
    this.runtime,
    this.type,
    this.id,
    this.desc,
  });
  FilmDetailModelVideo.fromJson(Map<String, dynamic> json) {
    sharingUrl = json["sharing_url"]?.toString();
    videoUrl = json["video_url"]?.toString();
    title = json["title"]?.toString();
    author = json["author"] != null ? FilmDetailModelVideoAuthor.fromJson(json["author"]) : null;
    uri = json["uri"]?.toString();
    coverUrl = json["cover_url"]?.toString();
    nComments = json["n_comments"]?.toInt();
    createTime = json["create_time"]?.toString();
    fileSize = json["file_size"]?.toInt();
    runtime = json["runtime"]?.toString();
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    desc = json["desc"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["sharing_url"] = sharingUrl;
    data["video_url"] = videoUrl;
    data["title"] = title;
    if (author != null) {
      data["author"] = author.toJson();
    }
    data["uri"] = uri;
    data["cover_url"] = coverUrl;
    data["n_comments"] = nComments;
    data["create_time"] = createTime;
    data["file_size"] = fileSize;
    data["runtime"] = runtime;
    data["type"] = type;
    data["id"] = id;
    data["desc"] = desc;
    return data;
  }
}

class FilmDetailModelDirectorsAvatar {
/*
{
  "large": "https://img3.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1451727734.81.webp",
  "normal": "https://img3.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1451727734.81.webp"
} 
*/

  String large;
  String normal;

  FilmDetailModelDirectorsAvatar({
    this.large,
    this.normal,
  });
  FilmDetailModelDirectorsAvatar.fromJson(Map<String, dynamic> json) {
    large = json["large"]?.toString();
    normal = json["normal"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["large"] = large;
    data["normal"] = normal;
    return data;
  }
}

class FilmDetailModelDirectors {
/*
{
  "name": "陈凯歌",
  "roles": [
    "导演"
  ],
  "title": "陈凯歌（同名）中国,北京影视演员",
  "url": "https://movie.douban.com/celebrity/1023040/",
  "abstract": "陈凯歌出身于艺术家庭，少年时期经历过文革和插队。1970年，陈凯歌参军。1974年复员转业1976年到北京电...",
  "author": null,
  "uri": "douban://douban.com/celebrity/1023040?subject_id=27228768",
  "cover_url": "https://img3.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1451727734.81.webp",
  "avatar": {
    "large": "https://img3.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1451727734.81.webp",
    "normal": "https://img3.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1451727734.81.webp"
  },
  "type": "celebrity",
  "id": "1023040",
  "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/celebrity/1023040/"
} 
*/

  String name;
  List<String> roles;
  String title;
  String url;
  String theAbstract;
  String author;
  String uri;
  String coverUrl;
  FilmDetailModelDirectorsAvatar avatar;
  String type;
  String id;
  String sharingUrl;

  FilmDetailModelDirectors({
    this.name,
    this.roles,
    this.title,
    this.url,
    this.theAbstract,
    this.author,
    this.uri,
    this.coverUrl,
    this.avatar,
    this.type,
    this.id,
    this.sharingUrl,
  });
  FilmDetailModelDirectors.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
  if (json["roles"] != null) {
  var v = json["roles"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    roles = arr0;
    }
    title = json["title"]?.toString();
    url = json["url"]?.toString();
    theAbstract = json["abstract"]?.toString();
    author = json["author"]?.toString();
    uri = json["uri"]?.toString();
    coverUrl = json["cover_url"]?.toString();
    avatar = json["avatar"] != null ? FilmDetailModelDirectorsAvatar.fromJson(json["avatar"]) : null;
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    sharingUrl = json["sharing_url"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    if (roles != null) {
      var v = roles;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["roles"] = arr0;
    }
    data["title"] = title;
    data["url"] = url;
    data["abstract"] = theAbstract;
    data["author"] = author;
    data["uri"] = uri;
    data["cover_url"] = coverUrl;
    if (avatar != null) {
      data["avatar"] = avatar.toJson();
    }
    data["type"] = type;
    data["id"] = id;
    data["sharing_url"] = sharingUrl;
    return data;
  }
}

class FilmDetailModelHonorInfos {
/*
{
  "kind": "rank",
  "uri": "douban://douban.com/subject_collection/movie_weekly_best",
  "rank": 3,
  "title": "一周口碑电影榜"
} 
*/

  String kind;
  String uri;
  int rank;
  String title;

  FilmDetailModelHonorInfos({
    this.kind,
    this.uri,
    this.rank,
    this.title,
  });
  FilmDetailModelHonorInfos.fromJson(Map<String, dynamic> json) {
    kind = json["kind"]?.toString();
    uri = json["uri"]?.toString();
    rank = json["rank"]?.toInt();
    title = json["title"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["kind"] = kind;
    data["uri"] = uri;
    data["rank"] = rank;
    data["title"] = title;
    return data;
  }
}

class FilmDetailModelCoverImageNormal {
/*
{
  "url": "https://img3.doubanio.com/view/photo/m/public/p2567998580.webp",
  "width": 428,
  "height": 600,
  "size": 0
} 
*/

  String url;
  int width;
  int height;
  int size;

  FilmDetailModelCoverImageNormal({
    this.url,
    this.width,
    this.height,
    this.size,
  });
  FilmDetailModelCoverImageNormal.fromJson(Map<String, dynamic> json) {
    url = json["url"]?.toString();
    width = json["width"]?.toInt();
    height = json["height"]?.toInt();
    size = json["size"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["url"] = url;
    data["width"] = width;
    data["height"] = height;
    data["size"] = size;
    return data;
  }
}

class FilmDetailModelCoverImageSmall {
/*
{
  "url": "https://img3.doubanio.com/view/photo/s/public/p2567998580.webp",
  "width": 428,
  "height": 600,
  "size": 0
} 
*/

  String url;
  int width;
  int height;
  int size;

  FilmDetailModelCoverImageSmall({
    this.url,
    this.width,
    this.height,
    this.size,
  });
  FilmDetailModelCoverImageSmall.fromJson(Map<String, dynamic> json) {
    url = json["url"]?.toString();
    width = json["width"]?.toInt();
    height = json["height"]?.toInt();
    size = json["size"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["url"] = url;
    data["width"] = width;
    data["height"] = height;
    data["size"] = size;
    return data;
  }
}

class FilmDetailModelCoverImageLarge {
/*
{
  "url": "https://img3.doubanio.com/view/photo/l/public/p2567998580.webp",
  "width": 1142,
  "height": 1600,
  "size": 0
} 
*/

  String url;
  int width;
  int height;
  int size;

  FilmDetailModelCoverImageLarge({
    this.url,
    this.width,
    this.height,
    this.size,
  });
  FilmDetailModelCoverImageLarge.fromJson(Map<String, dynamic> json) {
    url = json["url"]?.toString();
    width = json["width"]?.toInt();
    height = json["height"]?.toInt();
    size = json["size"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["url"] = url;
    data["width"] = width;
    data["height"] = height;
    data["size"] = size;
    return data;
  }
}

class FilmDetailModelCoverImage {
/*
{
  "large": {
    "url": "https://img3.doubanio.com/view/photo/l/public/p2567998580.webp",
    "width": 1142,
    "height": 1600,
    "size": 0
  },
  "raw": null,
  "small": {
    "url": "https://img3.doubanio.com/view/photo/s/public/p2567998580.webp",
    "width": 428,
    "height": 600,
    "size": 0
  },
  "is_animated": false,
  "normal": {
    "url": "https://img3.doubanio.com/view/photo/m/public/p2567998580.webp",
    "width": 428,
    "height": 600,
    "size": 0
  }
} 
*/

  FilmDetailModelCoverImageLarge large;
  String raw;
  FilmDetailModelCoverImageSmall small;
  bool isAnimated;
  FilmDetailModelCoverImageNormal normal;

  FilmDetailModelCoverImage({
    this.large,
    this.raw,
    this.small,
    this.isAnimated,
    this.normal,
  });
  FilmDetailModelCoverImage.fromJson(Map<String, dynamic> json) {
    large = json["large"] != null ? FilmDetailModelCoverImageLarge.fromJson(json["large"]) : null;
    raw = json["raw"]?.toString();
    small = json["small"] != null ? FilmDetailModelCoverImageSmall.fromJson(json["small"]) : null;
    isAnimated = json["is_animated"];
    normal = json["normal"] != null ? FilmDetailModelCoverImageNormal.fromJson(json["normal"]) : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (large != null) {
      data["large"] = large.toJson();
    }
    data["raw"] = raw;
    if (small != null) {
      data["small"] = small.toJson();
    }
    data["is_animated"] = isAnimated;
    if (normal != null) {
      data["normal"] = normal.toJson();
    }
    return data;
  }
}

class FilmDetailModelCoverAuthorLoc {
/*
{
  "id": "118267",
  "name": "长沙",
  "uid": "changsha"
} 
*/

  String id;
  String name;
  String uid;

  FilmDetailModelCoverAuthorLoc({
    this.id,
    this.name,
    this.uid,
  });
  FilmDetailModelCoverAuthorLoc.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toString();
    name = json["name"]?.toString();
    uid = json["uid"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    data["uid"] = uid;
    return data;
  }
}

class FilmDetailModelCoverAuthor {
/*
{
  "loc": {
    "id": "118267",
    "name": "长沙",
    "uid": "changsha"
  },
  "kind": "user",
  "name": "云深不知喵",
  "reg_time": "2014-01-05 22:54:12",
  "url": "https://www.douban.com/people/81983966/",
  "uri": "douban://douban.com/user/81983966",
  "avatar": "https://img3.doubanio.com/icon/up81983966-2.jpg",
  "type": "user",
  "id": "81983966",
  "uid": "81983966"
} 
*/

  FilmDetailModelCoverAuthorLoc loc;
  String kind;
  String name;
  String regTime;
  String url;
  String uri;
  String avatar;
  String type;
  String id;
  String uid;

  FilmDetailModelCoverAuthor({
    this.loc,
    this.kind,
    this.name,
    this.regTime,
    this.url,
    this.uri,
    this.avatar,
    this.type,
    this.id,
    this.uid,
  });
  FilmDetailModelCoverAuthor.fromJson(Map<String, dynamic> json) {
    loc = json["loc"] != null ? FilmDetailModelCoverAuthorLoc.fromJson(json["loc"]) : null;
    kind = json["kind"]?.toString();
    name = json["name"]?.toString();
    regTime = json["reg_time"]?.toString();
    url = json["url"]?.toString();
    uri = json["uri"]?.toString();
    avatar = json["avatar"]?.toString();
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    uid = json["uid"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (loc != null) {
      data["loc"] = loc.toJson();
    }
    data["kind"] = kind;
    data["name"] = name;
    data["reg_time"] = regTime;
    data["url"] = url;
    data["uri"] = uri;
    data["avatar"] = avatar;
    data["type"] = type;
    data["id"] = id;
    data["uid"] = uid;
    return data;
  }
}

class FilmDetailModelCover {
/*
{
  "description": "",
  "author": {
    "loc": {
      "id": "118267",
      "name": "长沙",
      "uid": "changsha"
    },
    "kind": "user",
    "name": "云深不知喵",
    "reg_time": "2014-01-05 22:54:12",
    "url": "https://www.douban.com/people/81983966/",
    "uri": "douban://douban.com/user/81983966",
    "avatar": "https://img3.doubanio.com/icon/up81983966-2.jpg",
    "type": "user",
    "id": "81983966",
    "uid": "81983966"
  },
  "url": "https://movie.douban.com/photos/photo/2567998580/",
  "image": {
    "large": {
      "url": "https://img3.doubanio.com/view/photo/l/public/p2567998580.webp",
      "width": 1142,
      "height": 1600,
      "size": 0
    },
    "raw": null,
    "small": {
      "url": "https://img3.doubanio.com/view/photo/s/public/p2567998580.webp",
      "width": 428,
      "height": 600,
      "size": 0
    },
    "is_animated": false,
    "normal": {
      "url": "https://img3.doubanio.com/view/photo/m/public/p2567998580.webp",
      "width": 428,
      "height": 600,
      "size": 0
    }
  },
  "uri": "douban://douban.com/photo/2567998580",
  "create_time": "2019-09-06 10:38:51",
  "position": 0,
  "owner_uri": "douban://douban.com/movie/32659890",
  "type": "photo",
  "id": "2567998580",
  "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/photo/2567998580/"
} 
*/

  String description;
  FilmDetailModelCoverAuthor author;
  String url;
  FilmDetailModelCoverImage image;
  String uri;
  String createTime;
  int position;
  String ownerUri;
  String type;
  String id;
  String sharingUrl;

  FilmDetailModelCover({
    this.description,
    this.author,
    this.url,
    this.image,
    this.uri,
    this.createTime,
    this.position,
    this.ownerUri,
    this.type,
    this.id,
    this.sharingUrl,
  });
  FilmDetailModelCover.fromJson(Map<String, dynamic> json) {
    description = json["description"]?.toString();
    author = json["author"] != null ? FilmDetailModelCoverAuthor.fromJson(json["author"]) : null;
    url = json["url"]?.toString();
    image = json["image"] != null ? FilmDetailModelCoverImage.fromJson(json["image"]) : null;
    uri = json["uri"]?.toString();
    createTime = json["create_time"]?.toString();
    position = json["position"]?.toInt();
    ownerUri = json["owner_uri"]?.toString();
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    sharingUrl = json["sharing_url"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["description"] = description;
    if (author != null) {
      data["author"] = author.toJson();
    }
    data["url"] = url;
    if (image != null) {
      data["image"] = image.toJson();
    }
    data["uri"] = uri;
    data["create_time"] = createTime;
    data["position"] = position;
    data["owner_uri"] = ownerUri;
    data["type"] = type;
    data["id"] = id;
    data["sharing_url"] = sharingUrl;
    return data;
  }
}

class FilmDetailModelTags {
/*
{
  "url": "https://www.douban.com/channel/30307946",
  "id": "30307946",
  "name": "爱国",
  "is_channel": true,
  "uri": "douban://douban.com/channel/30307946"
} 
*/

  String url;
  String id;
  String name;
  bool isChannel;
  String uri;

  FilmDetailModelTags({
    this.url,
    this.id,
    this.name,
    this.isChannel,
    this.uri,
  });
  FilmDetailModelTags.fromJson(Map<String, dynamic> json) {
    url = json["url"]?.toString();
    id = json["id"]?.toString();
    name = json["name"]?.toString();
    isChannel = json["is_channel"];
    uri = json["uri"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["url"] = url;
    data["id"] = id;
    data["name"] = name;
    data["is_channel"] = isChannel;
    data["uri"] = uri;
    return data;
  }
}

class FilmDetailModelColorScheme {
/*
{
  "is_dark": true,
  "primary_color_light": "a55d35",
  "_base_color": [
    0.05938697318007663
  ],
  "secondary_color": "f9f6f4",
  "_avg_color": [
    0.051971326164874564
  ],
  "primary_color_dark": "7f4829"
} 
*/

  bool isDark;
  String primaryColorLight;
  List<double> BaseColor;
  String secondaryColor;
  List<double> AvgColor;
  String primaryColorDark;

  FilmDetailModelColorScheme({
    this.isDark,
    this.primaryColorLight,
    this.BaseColor,
    this.secondaryColor,
    this.AvgColor,
    this.primaryColorDark,
  });
  FilmDetailModelColorScheme.fromJson(Map<String, dynamic> json) {
    isDark = json["is_dark"];
    primaryColorLight = json["primary_color_light"]?.toString();
  if (json["_base_color"] != null) {
  var v = json["_base_color"];
  var arr0 = List<double>();
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    BaseColor = arr0;
    }
    secondaryColor = json["secondary_color"]?.toString();
  if (json["_avg_color"] != null) {
  var v = json["_avg_color"];
  var arr0 = List<double>();
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    AvgColor = arr0;
    }
    primaryColorDark = json["primary_color_dark"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["is_dark"] = isDark;
    data["primary_color_light"] = primaryColorLight;
    if (BaseColor != null) {
      var v = BaseColor;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["_base_color"] = arr0;
    }
    data["secondary_color"] = secondaryColor;
    if (AvgColor != null) {
      var v = AvgColor;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["_avg_color"] = arr0;
    }
    data["primary_color_dark"] = primaryColorDark;
    return data;
  }
}

class FilmDetailModelActorsAvatar {
/*
{
  "large": "https://img9.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1656.webp",
  "normal": "https://img9.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1656.webp"
} 
*/

  String large;
  String normal;

  FilmDetailModelActorsAvatar({
    this.large,
    this.normal,
  });
  FilmDetailModelActorsAvatar.fromJson(Map<String, dynamic> json) {
    large = json["large"]?.toString();
    normal = json["normal"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["large"] = large;
    data["normal"] = normal;
    return data;
  }
}

class FilmDetailModelActors {
/*
{
  "name": "黄渤",
  "roles": [
    "演员"
  ],
  "title": "黄渤（同名）中国,山东,青岛影视演员",
  "url": "https://movie.douban.com/celebrity/1274242/",
  "abstract": "　　黄渤不但具有专业的表演素质，在他身上更散发着来自内心的真实与质朴。他曾经做过歌手、节目主持人...",
  "author": null,
  "uri": "douban://douban.com/celebrity/1274242?subject_id=27481212",
  "cover_url": "https://img9.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1656.webp",
  "avatar": {
    "large": "https://img9.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1656.webp",
    "normal": "https://img9.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1656.webp"
  },
  "type": "celebrity",
  "id": "1274242",
  "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/celebrity/1274242/"
} 
*/

  String name;
  List<String> roles;
  String title;
  String url;
  String theAbstract;
  String author;
  String uri;
  String coverUrl;
  FilmDetailModelActorsAvatar avatar;
  String type;
  String id;
  String sharingUrl;

  FilmDetailModelActors({
    this.name,
    this.roles,
    this.title,
    this.url,
    this.theAbstract,
    this.author,
    this.uri,
    this.coverUrl,
    this.avatar,
    this.type,
    this.id,
    this.sharingUrl,
  });
  FilmDetailModelActors.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
  if (json["roles"] != null) {
  var v = json["roles"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    roles = arr0;
    }
    title = json["title"]?.toString();
    url = json["url"]?.toString();
    theAbstract = json["abstract"]?.toString();
    author = json["author"]?.toString();
    uri = json["uri"]?.toString();
    coverUrl = json["cover_url"]?.toString();
    avatar = json["avatar"] != null ? FilmDetailModelActorsAvatar.fromJson(json["avatar"]) : null;
    type = json["type"]?.toString();
    id = json["id"]?.toString();
    sharingUrl = json["sharing_url"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    if (roles != null) {
      var v = roles;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["roles"] = arr0;
    }
    data["title"] = title;
    data["url"] = url;
    data["abstract"] = theAbstract;
    data["author"] = author;
    data["uri"] = uri;
    data["cover_url"] = coverUrl;
    if (avatar != null) {
      data["avatar"] = avatar.toJson();
    }
    data["type"] = type;
    data["id"] = id;
    data["sharing_url"] = sharingUrl;
    return data;
  }
}

class FilmDetailModelWebviewInfo {
/*
{} 
*/


  FilmDetailModelWebviewInfo();
  FilmDetailModelWebviewInfo.fromJson(Map<String, dynamic> json) {
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    return data;
  }
}

class FilmDetailModelUgcTabs {
/*
{
  "source": "reviews",
  "type": "review",
  "title": "影评"
} 
*/

  String source;
  String type;
  String title;

  FilmDetailModelUgcTabs({
    this.source,
    this.type,
    this.title,
  });
  FilmDetailModelUgcTabs.fromJson(Map<String, dynamic> json) {
    source = json["source"]?.toString();
    type = json["type"]?.toString();
    title = json["title"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["source"] = source;
    data["type"] = type;
    data["title"] = title;
    return data;
  }
}

class FilmDetailModelPic {
/*
{
  "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2567998580.webp",
  "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp"
} 
*/

  String large;
  String normal;

  FilmDetailModelPic({
    this.large,
    this.normal,
  });
  FilmDetailModelPic.fromJson(Map<String, dynamic> json) {
    large = json["large"]?.toString();
    normal = json["normal"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["large"] = large;
    data["normal"] = normal;
    return data;
  }
}

class FilmDetailModelRating {
/*
{
  "count": 419102,
  "max": 10,
  "star_count": 4,
  "value": 8
} 
*/

  int count;
  int max;
  int starCount;
  int value;

  FilmDetailModelRating({
    this.count,
    this.max,
    this.starCount,
    this.value,
  });
  FilmDetailModelRating.fromJson(Map<String, dynamic> json) {
    count = json["count"]?.toInt();
    max = json["max"]?.toInt();
    starCount = json["star_count"]?.toInt();
    value = json["value"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["count"] = count;
    data["max"] = max;
    data["star_count"] = starCount;
    data["value"] = value;
    return data;
  }
}

class FilmDetailModel {
/*
{
  "rating": {
    "count": 419102,
    "max": 10,
    "star_count": 4,
    "value": 8
  },
  "lineticket_url": "douban://douban.com/movie/32659890/ticket",
  "gallery_topic_count": 0,
  "pubdate": [
    "2019-09-30(中国大陆)"
  ],
  "last_episode_number": null,
  "pic": {
    "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2567998580.webp",
    "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2567998580.webp"
  },
  "vendor_count": 0,
  "body_bg_color": "f9f6f4",
  "is_tv": false,
  "head_info": null,
  "intro": "七位导演分别取材新中国成立70周年以来，祖国经历的无数个历史性经典瞬间。讲述普通人与国家之间息息相关密不可分的动人故事。聚焦大时代大事件下，小人物和国家之间，看似遥远实则密切的关联，唤醒全球华人共同回忆。",
  "ticket_price_info": "",
  "vendor_icons": [
    null
  ],
  "year": "2019",
  "card_subtitle": "2019 / 中国大陆 / 剧情 / 陈凯歌 张一白 管虎 薛晓路 徐峥 宁浩 文牧野 / 黄渤 张译",
  "forum_info": null,
  "webisode": null,
  "id": "32659890",
  "is_restrictive": false,
  "languages": [
    "汉语普通话"
  ],
  "genres": [
    "剧情"
  ],
  "can_interact": true,
  "review_count": 1252,
  "title": "我和我的祖国",
  "has_linewatch": false,
  "ugc_tabs": [
    {
      "source": "reviews",
      "type": "review",
      "title": "影评"
    }
  ],
  "forum_topic_count": 14,
  "webview_info": {},
  "is_released": true,
  "vendors": [
    null
  ],
  "actors": [
    {
      "name": "黄渤",
      "roles": [
        "演员"
      ],
      "title": "黄渤（同名）中国,山东,青岛影视演员",
      "url": "https://movie.douban.com/celebrity/1274242/",
      "abstract": "　　黄渤不但具有专业的表演素质，在他身上更散发着来自内心的真实与质朴。他曾经做过歌手、节目主持人...",
      "author": null,
      "uri": "douban://douban.com/celebrity/1274242?subject_id=27481212",
      "cover_url": "https://img9.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1656.webp",
      "avatar": {
        "large": "https://img9.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1656.webp",
        "normal": "https://img9.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1656.webp"
      },
      "type": "celebrity",
      "id": "1274242",
      "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/celebrity/1274242/"
    }
  ],
  "interest": null,
  "episodes_count": 0,
  "color_scheme": {
    "is_dark": true,
    "primary_color_light": "a55d35",
    "_base_color": [
      0.05938697318007663
    ],
    "secondary_color": "f9f6f4",
    "_avg_color": [
      0.051971326164874564
    ],
    "primary_color_dark": "7f4829"
  },
  "type": "movie",
  "mini_program_name": "gh_c9bfaa84f27b",
  "null_rating_reason": "",
  "linewatches": [
    null
  ],
  "info_url": "https://www.douban.com/doubanapp//h5/movie/32659890/desc",
  "tags": [
    {
      "url": "https://www.douban.com/channel/30307946",
      "id": "30307946",
      "name": "爱国",
      "is_channel": true,
      "uri": "douban://douban.com/channel/30307946"
    }
  ],
  "durations": [
    "155分钟"
  ],
  "comment_count": 133796,
  "cover": {
    "description": "",
    "author": {
      "loc": {
        "id": "118267",
        "name": "长沙",
        "uid": "changsha"
      },
      "kind": "user",
      "name": "云深不知喵",
      "reg_time": "2014-01-05 22:54:12",
      "url": "https://www.douban.com/people/81983966/",
      "uri": "douban://douban.com/user/81983966",
      "avatar": "https://img3.doubanio.com/icon/up81983966-2.jpg",
      "type": "user",
      "id": "81983966",
      "uid": "81983966"
    },
    "url": "https://movie.douban.com/photos/photo/2567998580/",
    "image": {
      "large": {
        "url": "https://img3.doubanio.com/view/photo/l/public/p2567998580.webp",
        "width": 1142,
        "height": 1600,
        "size": 0
      },
      "raw": null,
      "small": {
        "url": "https://img3.doubanio.com/view/photo/s/public/p2567998580.webp",
        "width": 428,
        "height": 600,
        "size": 0
      },
      "is_animated": false,
      "normal": {
        "url": "https://img3.doubanio.com/view/photo/m/public/p2567998580.webp",
        "width": 428,
        "height": 600,
        "size": 0
      }
    },
    "uri": "douban://douban.com/photo/2567998580",
    "create_time": "2019-09-06 10:38:51",
    "position": 0,
    "owner_uri": "douban://douban.com/movie/32659890",
    "type": "photo",
    "id": "2567998580",
    "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/photo/2567998580/"
  },
  "restrictive_icon_url": "",
  "header_bg_color": "7f4829",
  "is_douban_intro": false,
  "honor_infos": [
    {
      "kind": "rank",
      "uri": "douban://douban.com/subject_collection/movie_weekly_best",
      "rank": 3,
      "title": "一周口碑电影榜"
    }
  ],
  "sharing_url": "https://www.douban.com/doubanapp/dispatch/movie/32659890",
  "wechat_timeline_share": "screenshot",
  "countries": [
    "中国大陆"
  ],
  "url": "https://movie.douban.com/subject/32659890/",
  "release_date": null,
  "original_title": "",
  "uri": "douban://douban.com/movie/32659890",
  "pre_playable_date": null,
  "mini_program_page": "pages/subject/subject?type=movie&id=32659890",
  "subtype": "movie",
  "directors": [
    {
      "name": "陈凯歌",
      "roles": [
        "导演"
      ],
      "title": "陈凯歌（同名）中国,北京影视演员",
      "url": "https://movie.douban.com/celebrity/1023040/",
      "abstract": "陈凯歌出身于艺术家庭，少年时期经历过文革和插队。1970年，陈凯歌参军。1974年复员转业1976年到北京电...",
      "author": null,
      "uri": "douban://douban.com/celebrity/1023040?subject_id=27228768",
      "cover_url": "https://img3.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1451727734.81.webp",
      "avatar": {
        "large": "https://img3.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1451727734.81.webp",
        "normal": "https://img3.doubanio.com/view/celebrity/s_ratio_celebrity/public/p1451727734.81.webp"
      },
      "type": "celebrity",
      "id": "1023040",
      "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/celebrity/1023040/"
    }
  ],
  "is_show": false,
  "in_blacklist": false,
  "pre_release_desc": "",
  "video": {
    "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/movie/32659890/video%3Fvideo_id%3D104188%26video_type%3DA",
    "video_url": "https://sv1.doubanio.com/201910211235/395d188628e79828e78b638f083bbf22/video/2019/M/401040188.mp4",
    "title": "《我和我的祖国》引领国庆档冲击30亿元",
    "author": {
      "loc": {
        "id": "108296",
        "name": "上海",
        "uid": "shanghai"
      },
      "kind": "user",
      "followed": false,
      "name": "口袋电影君",
      "in_blacklist": false,
      "url": "https://www.douban.com/people/2308894/",
      "gender": "M",
      "reg_time": "2008-03-16 14:39:14",
      "uri": "douban://douban.com/user/2308894",
      "remark": "",
      "avatar": "https://img3.doubanio.com/icon/up2308894-4.jpg",
      "type": "user",
      "id": "2308894",
      "uid": "petergy"
    },
    "uri": "douban://douban.com/movie/32659890/video?video_id=104188&video_type=A",
    "cover_url": "https://img3.doubanio.com/view/photo/photo/public/p2571034074.webp?",
    "n_comments": 2,
    "create_time": "2019-10-09",
    "file_size": 0,
    "runtime": "02:36",
    "type": "A",
    "id": "104188",
    "desc": "《我和我的祖国》引领国庆档冲击30亿人民币！"
  },
  "aka": [
    "My People, My Country"
  ],
  "webisode_count": 0,
  "trailer": {
    "sharing_url": "https://www.douban.com/doubanapp/dispatch?uri=/movie/32659890/trailer%3Ftrailer_id%3D252949%26trailer_type%3DA",
    "video_url": "http://vt1.doubanio.com/201910211236/b18f4fccbb12c733fb4be23101a60470/view/movie/M/402520949.mp4",
    "title": "预告片",
    "uri": "douban://douban.com/movie/32659890/trailer?trailer_id=252949&trailer_type=A",
    "cover_url": "https://img3.doubanio.com/img/trailer/medium/2569021040.jpg?",
    "term_num": 0,
    "n_comments": 290,
    "create_time": "2019-09-18",
    "subject_title": "我和我的祖国",
    "file_size": 40465196,
    "runtime": "02:59",
    "type": "A",
    "id": "252949",
    "desc": ""
  }
} 
*/

  FilmDetailModelRating rating;
  String lineticketUrl;
  int galleryTopicCount;
  List<String> pubdate;
  String lastEpisodeNumber;
  FilmDetailModelPic pic;
  int vendorCount;
  String bodyBgColor;
  bool isTv;
  String headInfo;
  String intro;
  String ticketPriceInfo;
  List vendorIcons;
  String year;
  String cardSubtitle;
  String forumInfo;
  String webisode;
  String id;
  bool isRestrictive;
  List<String> languages;
  List<String> genres;
  bool canInteract;
  int reviewCount;
  String title;
  bool hasLinewatch;
  List<FilmDetailModelUgcTabs> ugcTabs;
  int forumTopicCount;
  FilmDetailModelWebviewInfo webviewInfo;
  bool isReleased;
  List vendors;
  List<FilmDetailModelActors> actors;
  String interest;
  int episodesCount;
  FilmDetailModelColorScheme colorScheme;
  String type;
  String miniProgramName;
  String nullRatingReason;
  List linewatches;
  String infoUrl;
  List<FilmDetailModelTags> tags;
  List<String> durations;
  int commentCount;
  FilmDetailModelCover cover;
  String restrictiveIconUrl;
  String headerBgColor;
  bool isDoubanIntro;
  List<FilmDetailModelHonorInfos> honorInfos;
  String sharingUrl;
  String wechatTimelineShare;
  List<String> countries;
  String url;
  String releaseDate;
  String originalTitle;
  String uri;
  String prePlayableDate;
  String miniProgramPage;
  String subtype;
  List<FilmDetailModelDirectors> directors;
  bool isShow;
  bool inBlacklist;
  String preReleaseDesc;
  FilmDetailModelVideo video;
  List<String> aka;
  int webisodeCount;
  FilmDetailModelTrailer trailer;

  FilmDetailModel({
    this.rating,
    this.lineticketUrl,
    this.galleryTopicCount,
    this.pubdate,
    this.lastEpisodeNumber,
    this.pic,
    this.vendorCount,
    this.bodyBgColor,
    this.isTv,
    this.headInfo,
    this.intro,
    this.ticketPriceInfo,
    this.vendorIcons,
    this.year,
    this.cardSubtitle,
    this.forumInfo,
    this.webisode,
    this.id,
    this.isRestrictive,
    this.languages,
    this.genres,
    this.canInteract,
    this.reviewCount,
    this.title,
    this.hasLinewatch,
    this.ugcTabs,
    this.forumTopicCount,
    this.webviewInfo,
    this.isReleased,
    this.vendors,
    this.actors,
    this.interest,
    this.episodesCount,
    this.colorScheme,
    this.type,
    this.miniProgramName,
    this.nullRatingReason,
    this.linewatches,
    this.infoUrl,
    this.tags,
    this.durations,
    this.commentCount,
    this.cover,
    this.restrictiveIconUrl,
    this.headerBgColor,
    this.isDoubanIntro,
    this.honorInfos,
    this.sharingUrl,
    this.wechatTimelineShare,
    this.countries,
    this.url,
    this.releaseDate,
    this.originalTitle,
    this.uri,
    this.prePlayableDate,
    this.miniProgramPage,
    this.subtype,
    this.directors,
    this.isShow,
    this.inBlacklist,
    this.preReleaseDesc,
    this.video,
    this.aka,
    this.webisodeCount,
    this.trailer,
  });
  FilmDetailModel.fromJson(Map<String, dynamic> json) {
    rating = json["rating"] != null ? FilmDetailModelRating.fromJson(json["rating"]) : null;
    lineticketUrl = json["lineticket_url"]?.toString();
    galleryTopicCount = json["gallery_topic_count"]?.toInt();
  if (json["pubdate"] != null) {
  var v = json["pubdate"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    pubdate = arr0;
    }
    lastEpisodeNumber = json["last_episode_number"]?.toString();
    pic = json["pic"] != null ? FilmDetailModelPic.fromJson(json["pic"]) : null;
    vendorCount = json["vendor_count"]?.toInt();
    bodyBgColor = json["body_bg_color"]?.toString();
    isTv = json["is_tv"];
    headInfo = json["head_info"]?.toString();
    intro = json["intro"]?.toString();
    ticketPriceInfo = json["ticket_price_info"]?.toString();
    year = json["year"]?.toString();
    cardSubtitle = json["card_subtitle"]?.toString();
    forumInfo = json["forum_info"]?.toString();
    webisode = json["webisode"]?.toString();
    id = json["id"]?.toString();
    isRestrictive = json["is_restrictive"];
  if (json["languages"] != null) {
  var v = json["languages"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    languages = arr0;
    }
  if (json["genres"] != null) {
  var v = json["genres"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    genres = arr0;
    }
    canInteract = json["can_interact"];
    reviewCount = json["review_count"]?.toInt();
    title = json["title"]?.toString();
    hasLinewatch = json["has_linewatch"];
  if (json["ugc_tabs"] != null) {
  var v = json["ugc_tabs"];
  var arr0 = List<FilmDetailModelUgcTabs>();
  v.forEach((v) {
  arr0.add(FilmDetailModelUgcTabs.fromJson(v));
  });
    ugcTabs = arr0;
    }
    forumTopicCount = json["forum_topic_count"]?.toInt();
    webviewInfo = json["webview_info"] != null ? FilmDetailModelWebviewInfo.fromJson(json["webview_info"]) : null;
    isReleased = json["is_released"];
  if (json["actors"] != null) {
  var v = json["actors"];
  var arr0 = List<FilmDetailModelActors>();
  v.forEach((v) {
  arr0.add(FilmDetailModelActors.fromJson(v));
  });
    actors = arr0;
    }
    interest = json["interest"]?.toString();
    episodesCount = json["episodes_count"]?.toInt();
    colorScheme = json["color_scheme"] != null ? FilmDetailModelColorScheme.fromJson(json["color_scheme"]) : null;
    type = json["type"]?.toString();
    miniProgramName = json["mini_program_name"]?.toString();
    nullRatingReason = json["null_rating_reason"]?.toString();
    infoUrl = json["info_url"]?.toString();
  if (json["tags"] != null) {
  var v = json["tags"];
  var arr0 = List<FilmDetailModelTags>();
  v.forEach((v) {
  arr0.add(FilmDetailModelTags.fromJson(v));
  });
    tags = arr0;
    }
  if (json["durations"] != null) {
  var v = json["durations"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    durations = arr0;
    }
    commentCount = json["comment_count"]?.toInt();
    cover = json["cover"] != null ? FilmDetailModelCover.fromJson(json["cover"]) : null;
    restrictiveIconUrl = json["restrictive_icon_url"]?.toString();
    headerBgColor = json["header_bg_color"]?.toString();
    isDoubanIntro = json["is_douban_intro"];
  if (json["honor_infos"] != null) {
  var v = json["honor_infos"];
  var arr0 = List<FilmDetailModelHonorInfos>();
  v.forEach((v) {
  arr0.add(FilmDetailModelHonorInfos.fromJson(v));
  });
    honorInfos = arr0;
    }
    sharingUrl = json["sharing_url"]?.toString();
    wechatTimelineShare = json["wechat_timeline_share"]?.toString();
  if (json["countries"] != null) {
  var v = json["countries"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    countries = arr0;
    }
    url = json["url"]?.toString();
    releaseDate = json["release_date"]?.toString();
    originalTitle = json["original_title"]?.toString();
    uri = json["uri"]?.toString();
    prePlayableDate = json["pre_playable_date"]?.toString();
    miniProgramPage = json["mini_program_page"]?.toString();
    subtype = json["subtype"]?.toString();
  if (json["directors"] != null) {
  var v = json["directors"];
  var arr0 = List<FilmDetailModelDirectors>();
  v.forEach((v) {
  arr0.add(FilmDetailModelDirectors.fromJson(v));
  });
    directors = arr0;
    }
    isShow = json["is_show"];
    inBlacklist = json["in_blacklist"];
    preReleaseDesc = json["pre_release_desc"]?.toString();
    video = json["video"] != null ? FilmDetailModelVideo.fromJson(json["video"]) : null;
  if (json["aka"] != null) {
  var v = json["aka"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    aka = arr0;
    }
    webisodeCount = json["webisode_count"]?.toInt();
    trailer = json["trailer"] != null ? FilmDetailModelTrailer.fromJson(json["trailer"]) : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (rating != null) {
      data["rating"] = rating.toJson();
    }
    data["lineticket_url"] = lineticketUrl;
    data["gallery_topic_count"] = galleryTopicCount;
    if (pubdate != null) {
      var v = pubdate;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["pubdate"] = arr0;
    }
    data["last_episode_number"] = lastEpisodeNumber;
    if (pic != null) {
      data["pic"] = pic.toJson();
    }
    data["vendor_count"] = vendorCount;
    data["body_bg_color"] = bodyBgColor;
    data["is_tv"] = isTv;
    data["head_info"] = headInfo;
    data["intro"] = intro;
    data["ticket_price_info"] = ticketPriceInfo;
    data["year"] = year;
    data["card_subtitle"] = cardSubtitle;
    data["forum_info"] = forumInfo;
    data["webisode"] = webisode;
    data["id"] = id;
    data["is_restrictive"] = isRestrictive;
    if (languages != null) {
      var v = languages;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["languages"] = arr0;
    }
    if (genres != null) {
      var v = genres;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["genres"] = arr0;
    }
    data["can_interact"] = canInteract;
    data["review_count"] = reviewCount;
    data["title"] = title;
    data["has_linewatch"] = hasLinewatch;
    if (ugcTabs != null) {
      var v = ugcTabs;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["ugc_tabs"] = arr0;
    }
    data["forum_topic_count"] = forumTopicCount;
    if (webviewInfo != null) {
      data["webview_info"] = webviewInfo.toJson();
    }
    data["is_released"] = isReleased;
    if (actors != null) {
      var v = actors;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["actors"] = arr0;
    }
    data["interest"] = interest;
    data["episodes_count"] = episodesCount;
    if (colorScheme != null) {
      data["color_scheme"] = colorScheme.toJson();
    }
    data["type"] = type;
    data["mini_program_name"] = miniProgramName;
    data["null_rating_reason"] = nullRatingReason;
    data["info_url"] = infoUrl;
    if (tags != null) {
      var v = tags;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["tags"] = arr0;
    }
    if (durations != null) {
      var v = durations;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["durations"] = arr0;
    }
    data["comment_count"] = commentCount;
    if (cover != null) {
      data["cover"] = cover.toJson();
    }
    data["restrictive_icon_url"] = restrictiveIconUrl;
    data["header_bg_color"] = headerBgColor;
    data["is_douban_intro"] = isDoubanIntro;
    if (honorInfos != null) {
      var v = honorInfos;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["honor_infos"] = arr0;
    }
    data["sharing_url"] = sharingUrl;
    data["wechat_timeline_share"] = wechatTimelineShare;
    if (countries != null) {
      var v = countries;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["countries"] = arr0;
    }
    data["url"] = url;
    data["release_date"] = releaseDate;
    data["original_title"] = originalTitle;
    data["uri"] = uri;
    data["pre_playable_date"] = prePlayableDate;
    data["mini_program_page"] = miniProgramPage;
    data["subtype"] = subtype;
    if (directors != null) {
      var v = directors;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["directors"] = arr0;
    }
    data["is_show"] = isShow;
    data["in_blacklist"] = inBlacklist;
    data["pre_release_desc"] = preReleaseDesc;
    if (video != null) {
      data["video"] = video.toJson();
    }
    if (aka != null) {
      var v = aka;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["aka"] = arr0;
    }
    data["webisode_count"] = webisodeCount;
    if (trailer != null) {
      data["trailer"] = trailer.toJson();
    }
    return data;
  }
}
