///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class theatricalFimeListModelSubjectsDirectors {
/*
{
  "name": "饺子"
} 
*/

  String name;

  theatricalFimeListModelSubjectsDirectors({
    this.name,
  });
  theatricalFimeListModelSubjectsDirectors.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    return data;
  }
}

class theatricalFimeListModelSubjectsColorScheme {
/*
{
  "is_dark": true,
  "primary_color_light": "a51a0e",
  "_base_color": [
    0.013274336283185842
  ],
  "secondary_color": "f9f5f4",
  "_avg_color": [
    0.02419354838709679
  ],
  "primary_color_dark": "7f140b"
} 
*/

  bool isDark;
  String primaryColorLight;
  List<double> BaseColor;
  String secondaryColor;
  List<double> AvgColor;
  String primaryColorDark;

  theatricalFimeListModelSubjectsColorScheme({
    this.isDark,
    this.primaryColorLight,
    this.BaseColor,
    this.secondaryColor,
    this.AvgColor,
    this.primaryColorDark,
  });
  theatricalFimeListModelSubjectsColorScheme.fromJson(Map<String, dynamic> json) {
    isDark = json["is_dark"];
    primaryColorLight = json["primary_color_light"]?.toString();
  if (json["_base_color"] != null) {
  var v = json["_base_color"];
  var arr0 = List<double>();
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    BaseColor = arr0;
    }
    secondaryColor = json["secondary_color"]?.toString();
  if (json["_avg_color"] != null) {
  var v = json["_avg_color"];
  var arr0 = List<double>();
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    AvgColor = arr0;
    }
    primaryColorDark = json["primary_color_dark"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["is_dark"] = isDark;
    data["primary_color_light"] = primaryColorLight;
    if (BaseColor != null) {
      var v = BaseColor;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["_base_color"] = arr0;
    }
    data["secondary_color"] = secondaryColor;
    if (AvgColor != null) {
      var v = AvgColor;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["_avg_color"] = arr0;
    }
    data["primary_color_dark"] = primaryColorDark;
    return data;
  }
}

class theatricalFimeListModelSubjectsActors {
/*
{
  "name": "吕艳婷"
} 
*/

  String name;

  theatricalFimeListModelSubjectsActors({
    this.name,
  });
  theatricalFimeListModelSubjectsActors.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    return data;
  }
}

class theatricalFimeListModelSubjectsPic {
/*
{
  "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2563780504.webp",
  "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2563780504.webp"
} 
*/

  String large;
  String normal;

  theatricalFimeListModelSubjectsPic({
    this.large,
    this.normal,
  });
  theatricalFimeListModelSubjectsPic.fromJson(Map<String, dynamic> json) {
    large = json["large"]?.toString();
    normal = json["normal"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["large"] = large;
    data["normal"] = normal;
    return data;
  }
}

class theatricalFimeListModelSubjectsRating {
/*
{
  "count": 1020433,
  "max": 10,
  "star_count": 4.5,
  "value": 8.5
} 
*/

  int count;
  int max;
  double starCount;
  double value;

  theatricalFimeListModelSubjectsRating({
    this.count,
    this.max,
    this.starCount,
    this.value,
  });
  theatricalFimeListModelSubjectsRating.fromJson(Map<String, dynamic> json) {
    count = json["count"]?.toInt();
    max = json["max"]?.toInt();
    starCount = json["star_count"]?.toDouble();
    value = json["value"]?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["count"] = count;
    data["max"] = max;
    data["star_count"] = starCount;
    data["value"] = value;
    return data;
  }
}

class theatricalFimeListModelSubjects {
/*
{
  "rating": {
    "count": 1020433,
    "max": 10,
    "star_count": 4.5,
    "value": 8.5
  },
  "lineticket_url": "douban://douban.com/movie/26794435/ticket",
  "pubdate": [
    "2019-07-26(中国大陆)"
  ],
  "wish_count": 153723,
  "pic": {
    "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2563780504.webp",
    "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2563780504.webp"
  },
  "is_show": false,
  "year": "2019",
  "card_subtitle": "2019 / 中国大陆 / 剧情 喜剧 动画 / 饺子 / 吕艳婷 囧森瑟夫",
  "id": "26794435",
  "genres": [
    "剧情"
  ],
  "title": "哪吒之魔童降世",
  "is_released": true,
  "actors": [
    {
      "name": "吕艳婷"
    }
  ],
  "interest": null,
  "text_link_info": null,
  "type": "movie",
  "has_linewatch": true,
  "color_scheme": {
    "is_dark": true,
    "primary_color_light": "a51a0e",
    "_base_color": [
      0.013274336283185842
    ],
    "secondary_color": "f9f5f4",
    "_avg_color": [
      0.02419354838709679
    ],
    "primary_color_dark": "7f140b"
  },
  "sharing_url": "https://www.douban.com/doubanapp/dispatch/movie/26794435",
  "collect_count": 1150565,
  "url": "https://movie.douban.com/subject/26794435/",
  "release_date": "2019-07-26",
  "uri": "douban://douban.com/movie/26794435",
  "subtype": "movie",
  "directors": [
    {
      "name": "饺子"
    }
  ],
  "null_rating_reason": ""
} 
*/

  theatricalFimeListModelSubjectsRating rating;
  String lineticketUrl;
  List<String> pubdate;
  int wishCount;
  theatricalFimeListModelSubjectsPic pic;
  bool isShow;
  String year;
  String cardSubtitle;
  String id;
  List<String> genres;
  String title;
  bool isReleased;
  List<theatricalFimeListModelSubjectsActors> actors;
  String interest;
  String textLinkInfo;
  String type;
  bool hasLinewatch;
  theatricalFimeListModelSubjectsColorScheme colorScheme;
  String sharingUrl;
  int collectCount;
  String url;
  String releaseDate;
  String uri;
  String subtype;
  List<theatricalFimeListModelSubjectsDirectors> directors;
  String nullRatingReason;

  theatricalFimeListModelSubjects({
    this.rating,
    this.lineticketUrl,
    this.pubdate,
    this.wishCount,
    this.pic,
    this.isShow,
    this.year,
    this.cardSubtitle,
    this.id,
    this.genres,
    this.title,
    this.isReleased,
    this.actors,
    this.interest,
    this.textLinkInfo,
    this.type,
    this.hasLinewatch,
    this.colorScheme,
    this.sharingUrl,
    this.collectCount,
    this.url,
    this.releaseDate,
    this.uri,
    this.subtype,
    this.directors,
    this.nullRatingReason,
  });
  theatricalFimeListModelSubjects.fromJson(Map<String, dynamic> json) {
    rating = json["rating"] != null ? theatricalFimeListModelSubjectsRating.fromJson(json["rating"]) : null;
    lineticketUrl = json["lineticket_url"]?.toString();
  if (json["pubdate"] != null) {
  var v = json["pubdate"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    pubdate = arr0;
    }
    wishCount = json["wish_count"]?.toInt();
    pic = json["pic"] != null ? theatricalFimeListModelSubjectsPic.fromJson(json["pic"]) : null;
    isShow = json["is_show"];
    year = json["year"]?.toString();
    cardSubtitle = json["card_subtitle"]?.toString();
    id = json["id"]?.toString();
  if (json["genres"] != null) {
  var v = json["genres"];
  var arr0 = List<String>();
  v.forEach((v) {
  arr0.add(v.toString());
  });
    genres = arr0;
    }
    title = json["title"]?.toString();
    isReleased = json["is_released"];
  if (json["actors"] != null) {
  var v = json["actors"];
  var arr0 = List<theatricalFimeListModelSubjectsActors>();
  v.forEach((v) {
  arr0.add(theatricalFimeListModelSubjectsActors.fromJson(v));
  });
    actors = arr0;
    }
    interest = json["interest"]?.toString();
    textLinkInfo = json["text_link_info"]?.toString();
    type = json["type"]?.toString();
    hasLinewatch = json["has_linewatch"];
    colorScheme = json["color_scheme"] != null ? theatricalFimeListModelSubjectsColorScheme.fromJson(json["color_scheme"]) : null;
    sharingUrl = json["sharing_url"]?.toString();
    collectCount = json["collect_count"]?.toInt();
    url = json["url"]?.toString();
    releaseDate = json["release_date"]?.toString();
    uri = json["uri"]?.toString();
    subtype = json["subtype"]?.toString();
  if (json["directors"] != null) {
  var v = json["directors"];
  var arr0 = List<theatricalFimeListModelSubjectsDirectors>();
  v.forEach((v) {
  arr0.add(theatricalFimeListModelSubjectsDirectors.fromJson(v));
  });
    directors = arr0;
    }
    nullRatingReason = json["null_rating_reason"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (rating != null) {
      data["rating"] = rating.toJson();
    }
    data["lineticket_url"] = lineticketUrl;
    if (pubdate != null) {
      var v = pubdate;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["pubdate"] = arr0;
    }
    data["wish_count"] = wishCount;
    if (pic != null) {
      data["pic"] = pic.toJson();
    }
    data["is_show"] = isShow;
    data["year"] = year;
    data["card_subtitle"] = cardSubtitle;
    data["id"] = id;
    if (genres != null) {
      var v = genres;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v);
  });
      data["genres"] = arr0;
    }
    data["title"] = title;
    data["is_released"] = isReleased;
    if (actors != null) {
      var v = actors;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["actors"] = arr0;
    }
    data["interest"] = interest;
    data["text_link_info"] = textLinkInfo;
    data["type"] = type;
    data["has_linewatch"] = hasLinewatch;
    if (colorScheme != null) {
      data["color_scheme"] = colorScheme.toJson();
    }
    data["sharing_url"] = sharingUrl;
    data["collect_count"] = collectCount;
    data["url"] = url;
    data["release_date"] = releaseDate;
    data["uri"] = uri;
    data["subtype"] = subtype;
    if (directors != null) {
      var v = directors;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["directors"] = arr0;
    }
    data["null_rating_reason"] = nullRatingReason;
    return data;
  }
}

class theatricalFimeListModel {
/*
{
  "count": 20,
  "start": 10,
  "total": 52,
  "subjects": [
    {
      "rating": {
        "count": 1020433,
        "max": 10,
        "star_count": 4.5,
        "value": 8.5
      },
      "lineticket_url": "douban://douban.com/movie/26794435/ticket",
      "pubdate": [
        "2019-07-26(中国大陆)"
      ],
      "wish_count": 153723,
      "pic": {
        "large": "https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2563780504.webp",
        "normal": "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2563780504.webp"
      },
      "is_show": false,
      "year": "2019",
      "card_subtitle": "2019 / 中国大陆 / 剧情 喜剧 动画 / 饺子 / 吕艳婷 囧森瑟夫",
      "id": "26794435",
      "genres": [
        "剧情"
      ],
      "title": "哪吒之魔童降世",
      "is_released": true,
      "actors": [
        {
          "name": "吕艳婷"
        }
      ],
      "interest": null,
      "text_link_info": null,
      "type": "movie",
      "has_linewatch": true,
      "color_scheme": {
        "is_dark": true,
        "primary_color_light": "a51a0e",
        "_base_color": [
          0.013274336283185842
        ],
        "secondary_color": "f9f5f4",
        "_avg_color": [
          0.02419354838709679
        ],
        "primary_color_dark": "7f140b"
      },
      "sharing_url": "https://www.douban.com/doubanapp/dispatch/movie/26794435",
      "collect_count": 1150565,
      "url": "https://movie.douban.com/subject/26794435/",
      "release_date": "2019-07-26",
      "uri": "douban://douban.com/movie/26794435",
      "subtype": "movie",
      "directors": [
        {
          "name": "饺子"
        }
      ],
      "null_rating_reason": ""
    }
  ]
} 
*/

  int count;
  int start;
  int total;
  List<theatricalFimeListModelSubjects> subjects;

  theatricalFimeListModel({
    this.count,
    this.start,
    this.total,
    this.subjects,
  });
  theatricalFimeListModel.fromJson(Map<String, dynamic> json) {
    count = json["count"]?.toInt();
    start = json["start"]?.toInt();
    total = json["total"]?.toInt();
  if (json["subjects"] != null) {
  var v = json["subjects"];
  var arr0 = List<theatricalFimeListModelSubjects>();
  v.forEach((v) {
  arr0.add(theatricalFimeListModelSubjects.fromJson(v));
  });
    subjects = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["count"] = count;
    data["start"] = start;
    data["total"] = total;
    if (subjects != null) {
      var v = subjects;
      var arr0 = List();
  v.forEach((v) {
  arr0.add(v.toJson());
  });
      data["subjects"] = arr0;
    }
    return data;
  }
}
